#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/configuration.el

* Startup
  #+begin_src emacs-lisp
    (defun tb/display-startup-time ()
      (message "Loaded in %s with %d garbage collections."
	       (format "%.2f seconds"
		       (float-time
			(time-subtract after-init-time before-init-time)))
	       gcs-done))

    (add-hook 'emacs-startup-hook #'tb/display-startup-time)
  #+end_src
* Functions
** Configuration
   Regenerate the configuration.el.
   #+begin_src emacs-lisp
     (defun tb/config-regen ()
	 (interactive)
	 (org-babel-tangle-file (expand-file-name "~/dotfiles/.emacs.d/configuration.org")))
   #+end_src

   Hook to automatically tangle customize.org file when we save it
   #+begin_src emacs-lisp
     (defun tb/config-save-hook ()
	 (when (string-equal (buffer-file-name)
			     (expand-file-name "~/dotfiles/.emacs.d/configuration.org"))
	   ;; disable babel confirmation message
	   (let ((org-confirm-babel-evaluate nil))
	     (org-babel-tangle))))
   #+end_src
* Package Archives and [[https://jwiegley.github.io/use-package][Use Package]]
  Package System

   #+begin_src emacs-lisp
     (require 'package)
     (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			      ("melpa-stable" . "https://stable.melpa.org/packages/")
			      ("melpa" . "https://melpa.org/packages/")
			      ("org" . "https://orgmode.org/elpa/")))

     ;; Initialize use-package on non-Linux platforms
     (unless (package-installed-p 'use-package)
       (progn
	 (package-refresh-contents)
	 (package-install 'use-package)))
   #+end_src
* Load Paths
  Add path used to store external elisps to emacs load-path
  #+begin_src emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/lisp")
   #+end_src
* Dired
  Dired Actions to other opened window
  #+begin_src emacs-lisp
  (setq dired-dwim-target t)
  #+end_src
* Shell
  #+begin_src emacs-lisp
    ;; Import PATH environment variable from shell
    (use-package exec-path-from-shell
      :ensure t
      :init
      (exec-path-from-shell-copy-env "PATH"))
  #+end_src
* Keybindings
   #+begin_src emacs-lisp
     ;; Make ESC quit prompts
     (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

     (load "~/.lconf/emacs/store/keybindings")
   #+end_src
* Hooks
   customize.org save tangle hook
   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'tb/config-save-hook)))
   #+end_src
* UI
** Editing
   Line and column numbers

   #+begin_src emacs-lisp

     ;; display column number in modeline
     (column-number-mode t)

     ;; enable global line numbers mode
     (global-display-line-numbers-mode t)

     ;; disable line numbers for some modes
     (dolist (mode '(term-mode-hook
		     shell-mode-hook
		     eshell-mode-hook
		     org-mode-hook))
       (add-hook mode (lambda() (display-line-numbers-mode 0))))

   #+end_src

   Rainbow delimiters
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :config (rainbow-delimiters-mode)
       :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src
** Basic
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)    ; Disable startup message

     (scroll-bar-mode -1)     ; Disable visible scrollbar
     (tool-bar-mode -1)       ; Disable the toolbar
     (tooltip-mode -1)        ; Disable tooltips
     (menu-bar-mode -1)       ; Disable the menu bar

     (set-fringe-mode 10)     ; Give some breathing room
     (setq visible-bell t)    ; Enable visible bell

     (set-face-attribute 'default nil :font "Menlo" :height 120) ; Default font
   #+end_src   
** Theming
*** Doom
    #+begin_src emacs-lisp
      (use-package doom-themes
	:ensure t
	:config
	;; Global settings (defaults)
	(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	      doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(load-theme 'doom-city-lights t)

	;; Enable flashing mode-line on errors
	(doom-themes-visual-bell-config)

	(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
	(doom-themes-treemacs-config)

	;; Corrects (and improves) org-mode's native fontification.
	(doom-themes-org-config))
    #+end_src
** Modeline
*** Doom
    #+begin_src emacs-lisp
      ;; disabled to verify if ramp hanging emacs is caused by this or not
      ;; (use-package doom-modeline
      ;;   :ensure t
      ;;   :init (doom-modeline-mode 1))

      ;; (setq doom-modeline-major-mode-icon t)
      ;; (setq doom-modeline-major-mode-color-icon t)
    #+end_src
** Icons
   #+begin_src emacs-lisp
   (use-package all-the-icons
     :ensure t
     :if (display-graphic-p)
     :commands all-the-icons-install-fonts
     :init
     (unless (find-font (font-spec :name "all-the-icons"))
     (all-the-icons-install-fonts t)))

     (use-package all-the-icons-dired
     :ensure t
     :if (display-graphic-p)
     :hook(dired-mode . all-the-icons-dired-mode))
   #+end_src
* Org-mode
  [[https://orgmode.org/][Org-Mode]] official website.
** Structure Templates
   
   Get old easy templates work again. Disabled by default since Org 9.2
   #+begin_src emacs-lisp
     (use-package org-tempo
       :config
       (add-to-list 'org-modules 'org-tempo))
   #+end_src

   Add some structure templates
   #+begin_src emacs-lisp
     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
   #+end_src
** Looks
*** Formatting
   #+begin_src emacs-lisp
     (use-package org
       :config
       (setq
	;; change continue ellipsis characters
	org-ellipsis " â¬‡"
	;; hide formatting wrappers
	org-hide-emphasis-markers t))
   #+end_src
*** Bullets
    #+begin_src emacs-lisp
    (use-package org-bullets
      :ensure t
      :after org
      :hook (org-mode . org-bullets-mode))
    #+end_src
** Babel
***** Add languages
      #+begin_src emacs-lisp
      (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
      (python . t)))

      ;; Suppress confirmation dialog before evaluation
      (setq org-confirm-babel-evaluate nil)
      #+end_src
** Presentation
   Presentation within Emacs using ====

   #+begin_src emacs-lisp
     (defun tb/org-tree-slide-setup ()
       (setq text-scale-mode-amount 6)
       ;; per slide can use inlineimages/noinlineimages options
       (org-display-inline-images)
       (text-scale-mode 1))

     (defun tb/org-tree-slide-end ()
	(text-scale-mode 0))

     (use-package org-tree-slide		
       :hook ((org-tree-slide-play . tb/org-tree-slide-setup)
	      (org-tree-slide-stop . tb/org-tree-slide-end))
       :custom
       (org-tree-slide-activate-message "Welcome!")
       (org-tree-slide-deactivate-message "Thank You!"))

     ;; define org-mode-map key to start and end presentations
     (define-key org-mode-map (kbd "C-;") 'org-tree-slide-mode)
   #+end_src

   Presentation Export to Reveal JS
   #+begin_src emacs-lisp
     (use-package org-re-reveal
       :init
       (setq org-re-reveal-root (expand-file-name "~/org-slides/reveal.js")))
   #+end_src
** Source Code
   #+begin_src emacs-lisp
     (define-key org-mode-map (kbd "C-=") 'org-edit-src-code)
   #+end_src
* Helpers
** Which key
   #+begin_src emacs-lisp
     (use-package which-key
       :ensure t
       :init (which-key-mode)
       :diminish which-key-mode
       :config
       (setq which-key-idle-delay 0.1))
   #+end_src
** Helpful
   #+begin_src emacs-lisp
     (use-package helpful
       :ensure t
       :bind (("C-h f" . helpful-callable)
	      ("C-h v" . helpful-variable)
	      ("C-h k" . helpful-key)
	      ("C-h F" . helpful-function)
	      ("C-h C" . helpful-command)
	      ("C-c C-d" . helpful-at-point)))
   #+end_src
* Miscellenous
** Serch using [[Https://github.com/hrs/engine-mode][Engine Mode]]
   
   Search engine mode. Triggered by =C-x /= by default. Set to =C-c s= as personal preference.

   #+begin_src emacs-lisp
     (use-package engine-mode
       :ensure t
       :config
       ;; define search engines
       (defengine duckduckgo
	 "https://duckduckgo.com/?q=%s"
	 :keybinding "d")
       (defengine github
	 "https://github.com/search?ref=simplesearch&q=%s"
	 :keybinding "g")
       (defengine stack-overflow
	 "https://stackoverflow.com/search?q=%s"
	 :keybinding "s")
       (defengine youtube
	 "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
	 :keybinding "y")
       (defengine google
	 "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")
  
       ;; set keymap prefix
       (engine/set-keymap-prefix (kbd "C-c s"))
  
       ;; enable engine-mode
       (engine-mode t))

   #+end_src
** Minibuffer completion: [[https://oremacs.com/swiper][Ivy, Swiper and Counsel]]

   /Ivy/ is a generic completion mechanism for Emacs.
   /Counsel/ is a collection of Ivy-enhanced versions of common Emacs commands.
   /Swiper/ is an Ivy-enhanced alternative to isearch.
   
   Installing counsel automatically installs ivy and swiper as dependencies.

   #+begin_src emacs-lisp
     (use-package ivy
       :config
       (ivy-mode))

     (use-package swiper
       :config
       (global-set-key "\C-s" 'swiper))

     (use-package counsel
       :bind (("M-x" . counsel-M-x)
	      ("C-x C-f" . counsel-find-file)
	      ("<f1> f" . counsel-describe-function)
	      ("<f1> v" . counsel-describe-variable)
	      ("<f1> o" . counsel-describe-symbol)
	      ("<f1> l" . counsel-find-library)
	      ("<f2> i" . counsel-info-lookup-symbol)
	      ("<f2> u" . counsel-unicode-char)
	      ))
   #+end_src
** Ace Jump
   #+begin_src emacs-lisp
     (use-package ace-jump-mode
       :bind ("C-c C-SPC" . ace-jump-mode))
   #+end_src
** Direnv
   #+begin_src emacs-lisp
     (use-package direnv
       :config
       (direnv-mode))
   #+end_src
** [[https://github.com/joaotavora/yasnippet][Yasnippet]]
   #+begin_src emacs-lisp
     (use-package yasnippet
       :config
       (add-hook 'prog-mode-hook #'yas-minor-mode))
   #+end_src
** Hide Lines
   #+begin_src emacs-lisp
   (use-package hide-lines)
   #+end_src
* Magit
  [[https://magit.vc/manual/magit.html][Magit User Manual]]
  #+begin_src emacs-lisp
    (use-package magit
      :ensure t)
  #+end_src
* [[https://github.com/emacs-evil/evil][Evil Mode]]
  #+begin_src emacs-lisp
    (use-package evil
      :ensure t
      :hook ((prog-mode . evil-mode)))
  #+end_src
* [[https://github.com/bbatsov/projectile][Projectile]]
  #+begin_src emacs-lisp
    (use-package projectile
      :diminish projectile-mode
      :init
      (projectile-mode +1)
      (when (file-directory-p "~/code")
	(setq projectile-project-search-path '("~/code" "~/go/src/github.com/thebinary")))
      (setq projectile-switch-project-action #'projectile-dired)
      :bind (:map projectile-mode-map
		  ("C-c p" . projectile-command-map))
      :custom ((projectile-completion-system 'ivy)))
  #+end_src

  #+begin_src emacs-lisp
    (use-package counsel-projectile
      :config (counsel-projectile-mode))
  #+end_src
* Development
** Flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :hook ((go-mode . flycheck-mode)))

     (use-package flycheck-pos-tip
       :hook ((flycheck-mode . flycheck-pos-tip-mode)))
   #+end_src
** [[https://github.com/joaotavora/eglot][Eglot (LSP Client)]]
   #+begin_src emacs-lisp
     (defun tb/eglot-format-buffer-on-save()
       (add-hook 'before-save-hook #'eglot-format-buffer -10 t))

     (use-package eglot)
       ;; :hook ((go-mode . eglot-ensure))
       ;; :config
       ;; (add-hook 'go-mode-hook #'tb/eglot-format-buffer-on-save))
   #+end_src
** TODO: [[https://emacs-lsp.github.io/lsp-mode/][LSP Mode]]
   Language Server Protocol Mode

   LSP Mode hook
   #+begin_src emacs-lisp
     (defun tb/lsp-mode-init ()
       ;; (lsp-headerline-breadcrumb-mode)
       (lsp-enable-which-key-integration))
   #+end_src

   #+begin_src emacs-lisp
     (use-package lsp-mode
       :init
       ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
       (setq lsp-keymap-prefix "C-c l")
       ;; :hook ((go-mode . lsp-deferred))
       :commands (lsp))

     ;; (use-package lsp-ui)
   #+end_src
** Company Mode
   #+begin_src emacs-lisp
     (use-package company
       :config
       (setq company-idle-delay 0)
       (setq company-minimum-prefix-length 1))
       ;; (setq lsp-completion-provider :capf))
   #+end_src

   Company Mode with icons: [[https://github.com/sebastiencs/company-box/][Company Box]]
   #+begin_src emacs-lisp
     (use-package company-box)
     ;; Not working with eglot
       ;; :hook (company-mode . company-box-mode))
   #+end_src
** Languages
*** Elisp
    #+begin_src emacs-lisp
      (defun tb/emacs-lisp-mode-hook ()
	(company-mode t))

      (add-hook 'emacs-lisp-mode-hook 'tb/emacs-lisp-mode-hook)
    #+end_src
*** Python
    #+begin_src emacs-lisp
      (defun tb/python-mode-hook ()
	(setq python-shell-interpreter "python3")
	(company-mode))

      (add-hook 'python-mode-hook 'tb/python-mode-hook)
    #+end_src
** Docker
   #+begin_src emacs-lisp
   (use-package dockerfile-mode
   :ensure t)
   #+end_src
* Other Major Modes
** [[https://github.com/NixOS/nixpkgs][NIX]]
   #+begin_src emacs-lisp
     (use-package nix-mode
       :ensure t)
   #+end_src

* My EL
  #+begin_src emacs-lisp
    (let ((default-directory "~/.lconf/emacs/lisp"))
      (progn
	(normal-top-level-add-subdirs-to-load-path)
	(load (expand-file-name "xen/xapi"))
	(load (expand-file-name "netutils/netutils"))
	(load (expand-file-name "utils/tb-ssh"))))

    (let ((default-directory "~/.lconf/emacs/store"))
      (progn
	(load (expand-file-name "vpns"))
	(load (expand-file-name "work-ssh"))
	(load (expand-file-name "xen-cluster"))))
  #+end_src
* Thanks To
  - [[https://github.com/daviwil/emacs-from-scratch][davilwil: Emacs From Scratch]]
